title = "CTF講義"
description = """
CTF講義用の問題を置いておきます。

フラグ形式は以下の通りです。

オリジナル:
`NPCA{example}`

picoCTF:
`picoCTF{example}`
"""

[[problems]]
name = "test"
title = "[Misc] Test Problem (オリジナル)"
digest = "2e67ec43686077b7550bc84a853793173237489c0a896483b998574ea3124ef2"
message = """
フラグは以下の通りです。

`NPCA{W31c0m3_2_th3_w0r1d_0f_C7F!}`
"""

[[problems]]
name = "rotten"
title = "[Crypto] Rotten Text (オリジナル)"
includes = ["./rotten"]
digest = "d96cd8b54cd14ef576ea923ffaa2efc32bcb82ef3bb2ae398c9c0b37aad3bff4"
message = """
CTFには古典的な暗号を解く問題も多く出題されます。

こんなのはどうでしょうか。

[rotten](./rotten)
"""

[[problems]]
name = "netcat"
title = "[Misc] what's a net cat? (picoCTF)"
digest = "8b5aef4cecd616ac23e674626656e15f6818c2ba545b8a4724a5a8e3aa75e64f"
message = """
CTFでは、問題サーバーと接続するのにnetcatというツールがよく使われます。
netcatを使って`jupiter.challenges.picoctf.org`の`64287`番ポートにアクセスしてみましょう。
"""

[[problems]]
name = "ghost"
title = "[Web] Ghost!? (オリジナル)"
includes = ["./ghost.html"]
digest = "2ecf1d5c2f4cc03aaf4d303d7ebd1a3e98520378e12523a44430cee711ef6f64"
message = """
以下のサイトにアクセスして、フラグを探しましょう。

[ghost.html](./ghost.html)
"""

[[problems]]
name = "valley"
title = "[OSINT] Valley (オリジナル)"
includes = ["./valley.jpg"]
digest = "e33721c7076bbf98d6bb47d903e4a0a72c5d614cf3dd4fb0457f74d34d8095d3"
message = """
写真に映っている谷の名前を特定してみましょう。

フラグは`NPCA{Moomin_Valley}`のように英語で答えてください。

[valley.jpg](./valley.jpg)
"""

[[problems]]
name = "valley2"
title = "[Forensics] Valley 2 (オリジナル)"
digest = "9f54f69eebf92a9878b0260a278c270776bc02ecb21450443d391385501e4c23"
message = """
さっきの写真には実はもう1つフラグが隠されています。探してみましょう。

ヒント: 画像ファイルもテキストファイルも結局は0と1の配列です。
"""

[[problems]]
name = "rsa"
title = "[Crypto] RSA Encryption (オリジナル)"
digest = "52c6e80cd10257bebb1df65842f192b1fe0f37dbb3417130d3eda63072edd437"
message = """
サマーウォーズの主人公のように、[RSA暗号](https://ja.wikipedia.org/wiki/RSA%E6%9A%97%E5%8F%B7)という暗号を解読してみましょう。

ヒント: うまくやれば`n`は簡単に素因数分解できます。

e:&nbsp;`65537`

n:&nbsp;`27333589662576212843053358389657197383463179501070707817492435364637976576534097843141116537496954306186454399936751380240681840781922045409026469015348277610097818873525367014327971026216521913345913556507735988063595101344684720025971437221372478723530021184581725186307555404879468405404485679866980685749351009030765908649393499614360264401297739807437689183573675545634245419377568066115574344088687542965899575577090483060847183379891662789965086483529694317089384991248584877380990994334957828843113667931519371949912279834327081531216490310165274448017556805555440379496434676311739508377532909390233117536309`

c:&nbsp;`23199900198636655739863003276115645447442269061547662038923090522341563301700800244517200095289980810020607328732352713757901730113214355160211351940796566291268263263321738537425528697218758895412679235393010709444044112423705210735465075052910944946105546594730604436283103383501718598740609170541901571113365285894995635287688488410566781198703336301009602860978793748055215218898160295591830292285051100883428827930111211165463614567002188016017678793246167285713309413845472781800377494846951658902170626559819945167175132971203923090355019455136617192334572328243406146228454605743395019902933668560405054971018`
"""

[[problems]]
name = "bin"
title = "[Reversing] Hello, Binary! (オリジナル)"
includes = ["./bin"]
digest = "575afa6d260c6d6cf9dc961221ee3631a487dd08651c1a4663ba0f1f990a8200"
message = """
今度は、Linux用バイナリを解析(機械語を解読)してみましょう。

以下は、文字列をを入力したらそれが正しいフラグかどうか判別してくれるプログラムです。

[bin](./bin)
"""

[[problems]]
name = "sqli"
title = "[Web] Web Gauntlet (picoCTF)"
digest = "7e13ae30504813b486c9c76b58d9ba504e0174816473680c9a9cb6b8814628b8"
message = """
SQLという言語はSQLiteなどのデータベースを操作するのによく使われます。例えば、サイトにログインするとき、ユーザー名とパスワードが合致するようなユーザーを`users`というテーブルから選択するには、以下のようなSQL文を使います。

```sql
SELECT * FROM users WHERE username='<ユーザー名>' AND password='<パスワード>'
```

しかし、このようなSQL文を用いてパスワード認証をしていて、さらにユーザー名やパスワードを検証せずにそのままSQL文に組み込んでいたら、どうなるでしょうか。

試しに、adminというアカウントにログインするのに、ユーザー名に`admin' --`、パスワードに`password`を入れてみます。

```sql
SELECT * FROM users WHERE username='admin' -- AND password='password'
```

`--`から先はコメントとして扱われるので、`AND password='password'`の部分が完全に無視されて、認証に成功してしまいます。

このような攻撃方法を"SQLインジェクション"といいますが、これはサーバー側で`--`のような邪悪な文字列を検出してブロックする("フィルタリング"といいます)ことである程度対策できます。

この問題はラウンドをクリアするごとに増えていくフィルタリング文字列をかいくぐってSQLインジェクションを成功させる問題です。(全5ラウンド)

問題サーバー: <http://jupiter.challenges.picoctf.org:19593/>  
ユーザー名: admin  
データベース: SQLite  

また、<http://jupiter.challenges.picoctf.org:19593/filter.php>に各ラウンドごとのフィルタルング文字列が表示され、全てクリアするとフラグが表示されます。
"""
